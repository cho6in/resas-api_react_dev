{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected_pref","Array","fill","prefectures","series","changePrefSelect","bind","assertThisInitialized","_this2","fetch","headers","X-API-KEY","then","response","json","res","setState","result","index","_this3","selectedWrap","slice","series_copy","i","length","name","prefName","splice","concat","humanCount","keys","data","forEach","push","value","resSeries","toConsumableArray","props","_this4","react_default","a","createElement","class","key","prefCode","id","type","checked","onChange","for","_this5","prefObj","chartOptions","title","text","yAxis","plotOptions","pointInterval","pointStart","legend","layout","align","verticalAlign","map","renderElem","highcharts_react_min_default","highcharts","Highcharts","options","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f46d709d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport HighchartsReact from 'highcharts-react-official';\nimport Highcharts from 'highcharts';\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      selected_pref: Array(47).fill(false),\n      prefectures: {},\n      series: []\n    };\n    this.changePrefSelect = this.changePrefSelect.bind(this);\n  }\n\n  componentDidMount() {\n    fetch('https://opendata.resas-portal.go.jp/api/v1/prefectures', {\n      headers: { 'X-API-KEY': 'F6NJ8KWjjnpTzkk47savZg1USOSc1d6EQV3FStlJ' }\n    })\n      .then(response => response.json())\n      .then(res => {\n        this.setState({ prefectures: res.result });\n      });\n  }\n\n  changePrefSelect(index) {\n    const selectedWrap = this.state.selected_pref.slice();\n    selectedWrap[index] = !selectedWrap[index];\n\n    if (!this.state.selected_pref[index]) {\n      fetch(\n        `https://opendata.resas-portal.go.jp/api/v1/population/composition/perYear?cityCode=-&prefCode=${index +\n          1}`,\n        {\n          headers: { 'X-API-KEY': 'F6NJ8KWjjnpTzkk47savZg1USOSc1d6EQV3FStlJ' }\n        }\n      )\n        .then(response => response.json())\n        .then(res => {\n          let humanCount = [];\n          Object.keys(res.result.data[0].data).forEach(i => {\n            humanCount.push(res.result.data[0].data[i].value);\n          });\n          const resSeries = {\n            name: this.state.prefectures[index].prefName,\n            data: humanCount\n          };\n          this.setState({\n            selected_pref: selectedWrap,\n            series: [...this.state.series, resSeries]\n          });\n        });\n    } else {\n      const series_copy = this.state.series.slice();\n      for (let i = 0; i < series_copy.length; i++) {\n        if (series_copy[i].name == this.state.prefectures[index].prefName) {\n          series_copy.splice(i, 1);\n        }\n      }\n      this.setState({\n        selected_pref: selectedWrap,\n        series: series_copy\n      });\n    }\n  }\n\n  renderElem(props) {\n    return (\n      <div class=\"chkbox\" key={props.prefCode}>\n        <input id={props.prefCode - 1} type=\"checkbox\" checked={this.state.selected_pref[props.prefCode - 1]}  onChange={() => this.changePrefSelect(props.prefCode - 1)} />\n        <label for={props.prefCode - 1}>{props.prefName}</label>\n      </div>\n    );\n  }\n\n  render() {\n    const prefObj = this.state.prefectures;\n    const chartOptions = {\n      title: {\n          text: '都道府県別人口推移'\n      },\n      yAxis: {\n        title: {\n          text: '人口数',\n        }\n      },\n      plotOptions: {\n        series: {\n          pointInterval: 5,\n          pointStart: 1960\n        }\n      },\n      legend: {\n          layout: 'vertical',\n          align: 'right',\n          verticalAlign: 'middle'\n      },\n      series: this.state.series\n    };\n\n    return (\n      <div>\n        <h1 class=\"title\">Population Trends in japan</h1>\n        <h2 class=\"subtitle\">都道府県</h2>\n        <div class=\"chkboxWrap\">{Object.keys(prefObj)\n          .map(i => this.renderElem(prefObj[i]))}</div>\n        <HighchartsReact highcharts={Highcharts} options={chartOptions} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}